version: "3.9"

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.4}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres_airflow:
      condition: service_healthy

networks:
  sparknet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16


services:

  postgres_airflow:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      sparknet:
        ipv4_address: 172.30.1.14


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "18080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      sparknet:
        ipv4_address: 172.30.1.15

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      sparknet:
        ipv4_address: 172.30.1.16

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      sparknet:
        ipv4_address: 172.30.1.17

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "Please set it to avoid permission issues with mounted volumes."
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      sparknet:
        ipv4_address: 172.30.1.18

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      sparknet:
        ipv4_address: 172.30.1.20

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper_v2
    networks:
      sparknet:
        ipv4_address: 172.30.1.10
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka_v2
    networks:
      sparknet:
        ipv4_address: 172.30.1.11
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_v2:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_v2:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:14-alpine
    container_name: postgres_v2
    networks:
      sparknet:
        ipv4_address: 172.30.1.12
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: spark
      POSTGRES_PASSWORD: spark
      POSTGRES_DB: sparkdb
    volumes:
      - pgdata:/var/lib/postgresql/data

  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: spark-jupyter
    networks:
      sparknet:
        ipv4_address: 172.30.1.13
    ports:
      - "8899:8888"
      - "4040:4040"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jars:/opt/spark/jars
      - ./data:/opt/airflow/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
      - SPARK_UI_PORT=4040
      - PYSPARK_SUBMIT_ARGS=--jars /opt/spark/jars/* pyspark-shell
    user: root
    command: start-notebook.sh --NotebookApp.token=''
    depends_on:
      - kafka
      - postgres

  hadoop-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-namenode
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-namenode:9000
      - HDFS_CONF_dfs_namenode_rpc-address=hadoop-namenode:9000
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop-namenode:/hadoop/dfs/name
    networks:
      sparknet:
        ipv4_address: 172.30.1.21

  hadoop-datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode1
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-namenode:9000
      - HDFS_CONF_dfs_namenode_rpc-address=hadoop-namenode:9000
      - HDFS_CONF_dfs_datanode_hostname=hadoop-datanode1
    ports:
      - "9864:9864"
      - "9866:9866"
      - "9867:9867"
    volumes:
      - hadoop-datanode1:/hadoop/dfs/data
    networks:
      sparknet:
        ipv4_address: 172.30.1.22
    depends_on:
      - hadoop-namenode

  hadoop-datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode2
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-namenode:9000
      - HDFS_CONF_dfs_namenode_rpc-address=hadoop-namenode:9000
      - HDFS_CONF_dfs_datanode_hostname=hadoop-datanode2
    ports:
      - "9865:9864"
      - "9868:9866"
      - "9869:9867"
    volumes:
      - hadoop-datanode2:/hadoop/dfs/data
    networks:
      sparknet:
        ipv4_address: 172.30.1.23
    depends_on:
      - hadoop-namenode

  hadoop-resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-resourcemanager
    environment:
      - YARN_RESOURCEMANAGER_HOSTNAME=hadoop-resourcemanager
    ports:
      - "8088:8088"
    networks:
      sparknet:
        ipv4_address: 172.30.1.24
    depends_on:
      - hadoop-namenode

  hadoop-nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-nodemanager
    networks:
      sparknet:
        ipv4_address: 172.30.1.25
    depends_on:
      - hadoop-resourcemanager


  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    depends_on:
      - postgres
    ports:
      - "3000:3000"
    networks:
      sparknet:
        ipv4_address: 172.30.1.26
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana


volumes:
  pgdata:
  postgres-db-volume:
  hadoop-namenode:
  hadoop-datanode1:
  hadoop-datanode2:
  grafana-storage: